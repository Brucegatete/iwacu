{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let PostsService = /*#__PURE__*/(() => {\n  class PostsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n\n    getPosts() {\n      this.http.get(\"http://localhost:3000/api/posts\").pipe(map(postData => {\n        return postData.posts.map(post => {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath\n          };\n        });\n      })).subscribe(transformedPosts => {\n        this.posts = transformedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n    }\n\n    getPostUpdateListener() {\n      return this.postsUpdated.asObservable();\n    }\n\n    getPost(id) {\n      return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n    }\n\n    addPost(title, content, image) {\n      const postData = new FormData();\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"image\", image, title);\n      this.http.post(\"http://localhost:3000/api/posts/\", postData).subscribe(responseData => {\n        const post = {\n          id: responseData.post.id,\n          title: title,\n          content: content,\n          imagePath: responseData.post.imagePath\n        };\n        this.posts.push(post);\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate([\"/\"]);\n      });\n    }\n\n    updatePost(id, title, content, image) {\n      let postData;\n\n      if (typeof image === 'object') {\n        postData = new FormData();\n        postData.append(\"id\", id);\n        postData.append(\"title\", title);\n        postData.append(\"content\", content);\n        postData.append(\"image\", image, title);\n      } else {\n        postData = {\n          id: id,\n          title: title,\n          content: content,\n          imagePath: image\n        };\n      }\n\n      this.http.put(\"http://localhost:3000/api/posts/\" + id, postData).subscribe(response => {\n        const updatedPosts = [...this.posts];\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\n        const post = {\n          id: id,\n          title: title,\n          content: content,\n          imagePath: \"\"\n        };\n        updatedPosts[oldPostIndex] = post;\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate([\"/\"]);\n      });\n    }\n\n    deletePost(postId) {\n      this.http.delete(\"http://localhost:3000/api/posts/\" + postId).subscribe(() => {\n        const updatedPosts = this.posts.filter(post => post.id != postId);\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n    }\n\n  }\n\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module"}